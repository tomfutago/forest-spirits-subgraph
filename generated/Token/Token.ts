// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AncestralSeedlingMint extends ethereum.Event {
  get params(): AncestralSeedlingMint__Params {
    return new AncestralSeedlingMint__Params(this);
  }
}

export class AncestralSeedlingMint__Params {
  _event: AncestralSeedlingMint;

  constructor(event: AncestralSeedlingMint) {
    this._event = event;
  }

  get spiritId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bonsaiType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bonsaiId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Token extends ethereum.SmartContract {
  static bind(address: Address): Token {
    return new Token("Token", address);
  }

  APE_PRICE(): BigInt {
    let result = super.call("APE_PRICE", "APE_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_APE_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("APE_PRICE", "APE_PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  APE_TOKEN(): Address {
    let result = super.call("APE_TOKEN", "APE_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_APE_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("APE_TOKEN", "APE_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  BASE_URI(): string {
    let result = super.call("BASE_URI", "BASE_URI():(string)", []);

    return result[0].toString();
  }

  try_BASE_URI(): ethereum.CallResult<string> {
    let result = super.tryCall("BASE_URI", "BASE_URI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  BONSAI(): Address {
    let result = super.call("BONSAI", "BONSAI():(address)", []);

    return result[0].toAddress();
  }

  try_BONSAI(): ethereum.CallResult<Address> {
    let result = super.tryCall("BONSAI", "BONSAI():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  BONSAI_MERKLE_ROOT(): Bytes {
    let result = super.call(
      "BONSAI_MERKLE_ROOT",
      "BONSAI_MERKLE_ROOT():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_BONSAI_MERKLE_ROOT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BONSAI_MERKLE_ROOT",
      "BONSAI_MERKLE_ROOT():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BURN_ADDRESS(): Address {
    let result = super.call("BURN_ADDRESS", "BURN_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_BURN_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("BURN_ADDRESS", "BURN_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  CONTRACT_URI(): string {
    let result = super.call("CONTRACT_URI", "CONTRACT_URI():(string)", []);

    return result[0].toString();
  }

  try_CONTRACT_URI(): ethereum.CallResult<string> {
    let result = super.tryCall("CONTRACT_URI", "CONTRACT_URI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPEN_BONSAI(): boolean {
    let result = super.call("OPEN_BONSAI", "OPEN_BONSAI():(bool)", []);

    return result[0].toBoolean();
  }

  try_OPEN_BONSAI(): ethereum.CallResult<boolean> {
    let result = super.tryCall("OPEN_BONSAI", "OPEN_BONSAI():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  OPEN_PARTNER(): boolean {
    let result = super.call("OPEN_PARTNER", "OPEN_PARTNER():(bool)", []);

    return result[0].toBoolean();
  }

  try_OPEN_PARTNER(): ethereum.CallResult<boolean> {
    let result = super.tryCall("OPEN_PARTNER", "OPEN_PARTNER():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  OPEN_PUBLIC(): boolean {
    let result = super.call("OPEN_PUBLIC", "OPEN_PUBLIC():(bool)", []);

    return result[0].toBoolean();
  }

  try_OPEN_PUBLIC(): ethereum.CallResult<boolean> {
    let result = super.tryCall("OPEN_PUBLIC", "OPEN_PUBLIC():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  PARTNER_MERKLE_ROOT(): Bytes {
    let result = super.call(
      "PARTNER_MERKLE_ROOT",
      "PARTNER_MERKLE_ROOT():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PARTNER_MERKLE_ROOT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PARTNER_MERKLE_ROOT",
      "PARTNER_MERKLE_ROOT():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PRICE(): BigInt {
    let result = super.call("PRICE", "PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRICE", "PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_BONSAI(): BigInt {
    let result = super.call("PRICE_BONSAI", "PRICE_BONSAI():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE_BONSAI(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRICE_BONSAI", "PRICE_BONSAI():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ROOTS(): Address {
    let result = super.call("ROOTS", "ROOTS():(address)", []);

    return result[0].toAddress();
  }

  try_ROOTS(): ethereum.CallResult<Address> {
    let result = super.tryCall("ROOTS", "ROOTS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SEEDLING(): Address {
    let result = super.call("SEEDLING", "SEEDLING():(address)", []);

    return result[0].toAddress();
  }

  try_SEEDLING(): ethereum.CallResult<Address> {
    let result = super.tryCall("SEEDLING", "SEEDLING():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TREASURY(): Address {
    let result = super.call("TREASURY", "TREASURY():(address)", []);

    return result[0].toAddress();
  }

  try_TREASURY(): ethereum.CallResult<Address> {
    let result = super.tryCall("TREASURY", "TREASURY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WALLET_MINT_LIMIT(): BigInt {
    let result = super.call(
      "WALLET_MINT_LIMIT",
      "WALLET_MINT_LIMIT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WALLET_MINT_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WALLET_MINT_LIMIT",
      "WALLET_MINT_LIMIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  didOwnerMint(): boolean {
    let result = super.call("didOwnerMint", "didOwnerMint():(bool)", []);

    return result[0].toBoolean();
  }

  try_didOwnerMint(): ethereum.CallResult<boolean> {
    let result = super.tryCall("didOwnerMint", "didOwnerMint():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMintAllowance(
    user: Address,
    amount: BigInt,
    proof: Array<Bytes>,
    isBonsaiOwner: boolean
  ): BigInt {
    let result = super.call(
      "getMintAllowance",
      "getMintAllowance(address,uint256,bytes32[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytesArray(proof),
        ethereum.Value.fromBoolean(isBonsaiOwner)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMintAllowance(
    user: Address,
    amount: BigInt,
    proof: Array<Bytes>,
    isBonsaiOwner: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMintAllowance",
      "getMintAllowance(address,uint256,bytes32[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytesArray(proof),
        ethereum.Value.fromBoolean(isBonsaiOwner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberMinted(_address: Address): BigInt {
    let result = super.call(
      "getNumberMinted",
      "getNumberMinted(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_getNumberMinted(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberMinted",
      "getNumberMinted(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenUriOverride(param0: BigInt): string {
    let result = super.call(
      "tokenUriOverride",
      "tokenUriOverride(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toString();
  }

  try_tokenUriOverride(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenUriOverride",
      "tokenUriOverride(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ape(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get seedling(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get bonsai(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get roots(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get contractOwner(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get quantity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get seedlings(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bonsai(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get roots(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get reservedAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get useApe(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get isBonsaiOwner(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class OwnerMintCall extends ethereum.Call {
  get inputs(): OwnerMintCall__Inputs {
    return new OwnerMintCall__Inputs(this);
  }

  get outputs(): OwnerMintCall__Outputs {
    return new OwnerMintCall__Outputs(this);
  }
}

export class OwnerMintCall__Inputs {
  _call: OwnerMintCall;

  constructor(call: OwnerMintCall) {
    this._call = call;
  }
}

export class OwnerMintCall__Outputs {
  _call: OwnerMintCall;

  constructor(call: OwnerMintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApePriceCall extends ethereum.Call {
  get inputs(): SetApePriceCall__Inputs {
    return new SetApePriceCall__Inputs(this);
  }

  get outputs(): SetApePriceCall__Outputs {
    return new SetApePriceCall__Outputs(this);
  }
}

export class SetApePriceCall__Inputs {
  _call: SetApePriceCall;

  constructor(call: SetApePriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetApePriceCall__Outputs {
  _call: SetApePriceCall;

  constructor(call: SetApePriceCall) {
    this._call = call;
  }
}

export class SetApeTokenCall extends ethereum.Call {
  get inputs(): SetApeTokenCall__Inputs {
    return new SetApeTokenCall__Inputs(this);
  }

  get outputs(): SetApeTokenCall__Outputs {
    return new SetApeTokenCall__Outputs(this);
  }
}

export class SetApeTokenCall__Inputs {
  _call: SetApeTokenCall;

  constructor(call: SetApeTokenCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetApeTokenCall__Outputs {
  _call: SetApeTokenCall;

  constructor(call: SetApeTokenCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseUriCall extends ethereum.Call {
  get inputs(): SetBaseUriCall__Inputs {
    return new SetBaseUriCall__Inputs(this);
  }

  get outputs(): SetBaseUriCall__Outputs {
    return new SetBaseUriCall__Outputs(this);
  }
}

export class SetBaseUriCall__Inputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }

  get _baseUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseUriCall__Outputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }
}

export class SetBonsaiMerkleRootCall extends ethereum.Call {
  get inputs(): SetBonsaiMerkleRootCall__Inputs {
    return new SetBonsaiMerkleRootCall__Inputs(this);
  }

  get outputs(): SetBonsaiMerkleRootCall__Outputs {
    return new SetBonsaiMerkleRootCall__Outputs(this);
  }
}

export class SetBonsaiMerkleRootCall__Inputs {
  _call: SetBonsaiMerkleRootCall;

  constructor(call: SetBonsaiMerkleRootCall) {
    this._call = call;
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetBonsaiMerkleRootCall__Outputs {
  _call: SetBonsaiMerkleRootCall;

  constructor(call: SetBonsaiMerkleRootCall) {
    this._call = call;
  }
}

export class SetBurnAddressCall extends ethereum.Call {
  get inputs(): SetBurnAddressCall__Inputs {
    return new SetBurnAddressCall__Inputs(this);
  }

  get outputs(): SetBurnAddressCall__Outputs {
    return new SetBurnAddressCall__Outputs(this);
  }
}

export class SetBurnAddressCall__Inputs {
  _call: SetBurnAddressCall;

  constructor(call: SetBurnAddressCall) {
    this._call = call;
  }

  get _burnAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnAddressCall__Outputs {
  _call: SetBurnAddressCall;

  constructor(call: SetBurnAddressCall) {
    this._call = call;
  }
}

export class SetContractUriCall extends ethereum.Call {
  get inputs(): SetContractUriCall__Inputs {
    return new SetContractUriCall__Inputs(this);
  }

  get outputs(): SetContractUriCall__Outputs {
    return new SetContractUriCall__Outputs(this);
  }
}

export class SetContractUriCall__Inputs {
  _call: SetContractUriCall;

  constructor(call: SetContractUriCall) {
    this._call = call;
  }

  get _contractUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractUriCall__Outputs {
  _call: SetContractUriCall;

  constructor(call: SetContractUriCall) {
    this._call = call;
  }
}

export class SetCreatorCall extends ethereum.Call {
  get inputs(): SetCreatorCall__Inputs {
    return new SetCreatorCall__Inputs(this);
  }

  get outputs(): SetCreatorCall__Outputs {
    return new SetCreatorCall__Outputs(this);
  }
}

export class SetCreatorCall__Inputs {
  _call: SetCreatorCall;

  constructor(call: SetCreatorCall) {
    this._call = call;
  }

  get i(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCreatorCall__Outputs {
  _call: SetCreatorCall;

  constructor(call: SetCreatorCall) {
    this._call = call;
  }
}

export class SetOpenBonsaiCall extends ethereum.Call {
  get inputs(): SetOpenBonsaiCall__Inputs {
    return new SetOpenBonsaiCall__Inputs(this);
  }

  get outputs(): SetOpenBonsaiCall__Outputs {
    return new SetOpenBonsaiCall__Outputs(this);
  }
}

export class SetOpenBonsaiCall__Inputs {
  _call: SetOpenBonsaiCall;

  constructor(call: SetOpenBonsaiCall) {
    this._call = call;
  }

  get _open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOpenBonsaiCall__Outputs {
  _call: SetOpenBonsaiCall;

  constructor(call: SetOpenBonsaiCall) {
    this._call = call;
  }
}

export class SetOpenPartnerCall extends ethereum.Call {
  get inputs(): SetOpenPartnerCall__Inputs {
    return new SetOpenPartnerCall__Inputs(this);
  }

  get outputs(): SetOpenPartnerCall__Outputs {
    return new SetOpenPartnerCall__Outputs(this);
  }
}

export class SetOpenPartnerCall__Inputs {
  _call: SetOpenPartnerCall;

  constructor(call: SetOpenPartnerCall) {
    this._call = call;
  }

  get _open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOpenPartnerCall__Outputs {
  _call: SetOpenPartnerCall;

  constructor(call: SetOpenPartnerCall) {
    this._call = call;
  }
}

export class SetOpenPublicCall extends ethereum.Call {
  get inputs(): SetOpenPublicCall__Inputs {
    return new SetOpenPublicCall__Inputs(this);
  }

  get outputs(): SetOpenPublicCall__Outputs {
    return new SetOpenPublicCall__Outputs(this);
  }
}

export class SetOpenPublicCall__Inputs {
  _call: SetOpenPublicCall;

  constructor(call: SetOpenPublicCall) {
    this._call = call;
  }

  get _open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOpenPublicCall__Outputs {
  _call: SetOpenPublicCall;

  constructor(call: SetOpenPublicCall) {
    this._call = call;
  }
}

export class SetPartnerMerkleRootCall extends ethereum.Call {
  get inputs(): SetPartnerMerkleRootCall__Inputs {
    return new SetPartnerMerkleRootCall__Inputs(this);
  }

  get outputs(): SetPartnerMerkleRootCall__Outputs {
    return new SetPartnerMerkleRootCall__Outputs(this);
  }
}

export class SetPartnerMerkleRootCall__Inputs {
  _call: SetPartnerMerkleRootCall;

  constructor(call: SetPartnerMerkleRootCall) {
    this._call = call;
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetPartnerMerkleRootCall__Outputs {
  _call: SetPartnerMerkleRootCall;

  constructor(call: SetPartnerMerkleRootCall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}

export class SetPriceBonsaiCall extends ethereum.Call {
  get inputs(): SetPriceBonsaiCall__Inputs {
    return new SetPriceBonsaiCall__Inputs(this);
  }

  get outputs(): SetPriceBonsaiCall__Outputs {
    return new SetPriceBonsaiCall__Outputs(this);
  }
}

export class SetPriceBonsaiCall__Inputs {
  _call: SetPriceBonsaiCall;

  constructor(call: SetPriceBonsaiCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceBonsaiCall__Outputs {
  _call: SetPriceBonsaiCall;

  constructor(call: SetPriceBonsaiCall) {
    this._call = call;
  }
}

export class SetTokenUriCall extends ethereum.Call {
  get inputs(): SetTokenUriCall__Inputs {
    return new SetTokenUriCall__Inputs(this);
  }

  get outputs(): SetTokenUriCall__Outputs {
    return new SetTokenUriCall__Outputs(this);
  }
}

export class SetTokenUriCall__Inputs {
  _call: SetTokenUriCall;

  constructor(call: SetTokenUriCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get uris(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class SetTokenUriCall__Outputs {
  _call: SetTokenUriCall;

  constructor(call: SetTokenUriCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SetWalletMintLimitCall extends ethereum.Call {
  get inputs(): SetWalletMintLimitCall__Inputs {
    return new SetWalletMintLimitCall__Inputs(this);
  }

  get outputs(): SetWalletMintLimitCall__Outputs {
    return new SetWalletMintLimitCall__Outputs(this);
  }
}

export class SetWalletMintLimitCall__Inputs {
  _call: SetWalletMintLimitCall;

  constructor(call: SetWalletMintLimitCall) {
    this._call = call;
  }

  get _walletMintLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWalletMintLimitCall__Outputs {
  _call: SetWalletMintLimitCall;

  constructor(call: SetWalletMintLimitCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
